schema {
  query: Query
  mutation: Mutation
}
type Query {
  user(
    "primary key"
    id: Int!
  ): user!
  users(
    "search by name"
    name: String!
  ): [user!]!
  login(email: String!, password: String!): user!
  logout: Boolean!
  feed(
    "User primary key"
    id: Int!,
    "The start index of posts to pull"
    startIndex: Int!
  ): [Post!]!
  verifyToken: user!
  postComments(
    "A post's primary key"
    post_id: Int!
  ): [Comment!]!
  verifyTokenMobile(
    "The user cookie"
    token: String!
  ): user!
}
type user {
  id: Int!
  name: String!
  email: String!
  verified: Boolean!
}
type Post {
  "Primary key"
  id: Int!
  "Author"
  created_by: user!
  "Created at"
  created_at: String!
  "Title text"
  title: String!
  "Summary text"
  text: String!
  "tags"
  tags: [String!]!
  "visibility"
  visibility: Visibility!
  "Total number of likes and comments"
  _count: PostStats!
}
type PostStats {
  "The total number of likes"
  likes: Int!
  "The total number of comments"
  comments: Int!
}
type Comment {
  id: Int!
  user_id: Int!
  post_id: Int!
  text: String!
  created_at: String!
  created_by: user!
  _count: CommentCount!
  likes: [UserRep!]!
}
type CommentCount {
  likes: Int!
}
type UserRep {
  user_id: Int!
}
type Mutation {
  onboard(name: String!, email: String!, password: String!): user!
  addPostLike(
    "User primary key"
    user_id: Int!,
    "Post primary key"
    post_id: Int!
  ): PostLikeType!
  removePostLike(
    "User primary key"
    user_id: Int!,
    "Post primary key"
    post_id: Int!
  ): Boolean!
  createPost(
    "User primary key"
    user_id: Int!,
    "Post title"
    title: String!,
    "Post text"
    text: String!,
    "Post tags"
    tags: [String!]!,
    "Post visibility"
    visibility: Visibility!
  ): Post!
  createComment(
    "The comment text"
    text: String!,
    "A post's primary key"
    post_id: Int!,
    "A user's primary key"
    user_id: Int!
  ): Comment!
}
type PostLikeType {
  id: Int!
  user_id: Int!
  post_id: Int!
  created_by: user!
}
enum Visibility {
  public
  friends
}
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
